import { OpenAI } from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ 2-3 —Å–∞–º—ã–º–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏ —Å –ø–æ–º–æ—â—å—é GPT-5 nano
 * –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞, –∞ –Ω–µ –ø–æ–ª–Ω–æ—Ç–µ –æ—Ö–≤–∞—Ç–∞
 *
 * @param query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
 * @returns –ú–∞—Å—Å–∏–≤ –∏–∑ 2-3 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ–≥–æ–≤
 */
export async function enhanceSearchQuery(
  query: string
): Promise<{ originalQuery: string; enhancedTags: string[] }> {
  try {
    if (!query.trim()) {
      return { originalQuery: query, enhancedTags: [] };
    }

    const response = await openai.chat.completions.create({
      model: "gpt-5-nano-2025-08-07",
      messages: [
        {
          role: "system",
          content: `You are an assistant for a drawing tutorial search system. Given a search query, generate ONLY 2-3 most relevant lowercase English tags for precise search.

Rules:
1. Return MAXIMUM 3 tags (2-3 is optimal)
2. Focus on the MAIN subject/concept only
3. Use specific terms, not generic ones
4. Translate Russian ‚Üí English directly
5. Avoid synonyms - only the most essential tags

Examples:
- "–Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ª–∏—Ü–æ" ‚Üí face, portrait
- "—Ä—É–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞" ‚Üí hand, anatomy
- "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –≤ —Ä–∏—Å—É–Ω–∫–µ" ‚Üí perspective, depth
- "–∫–∞–∫ —Ä–∏—Å–æ–≤–∞—Ç—å –≤–æ–ª–æ—Å—ã" ‚Üí hair, texture
- "–≥–ª–∞–∑–∞ –∞–Ω–∏–º–µ" ‚Üí eyes, anime
- "–ø–æ—Ä—Ç—Ä–µ—Ç –∫–∞—Ä–∞–Ω–¥–∞—à–æ–º" ‚Üí portrait, pencil

IMPORTANT: Return ONLY 2-3 tags maximum. More tags = less precise results.
Avoid: 'art', 'drawing', 'tutorial', 'guide', 'sketch', 'illustration'.

Reply with only a comma-separated list of 2-3 tags.`,
        },
        {
          role: "user",
          content: `Generate related search tags for: "${query}"`,
        },
      ],
    });

    const tagString = response.choices[0].message.content?.trim() || "";

    const enhancedTags = tagString
      .split(",")
      .map((t) => t.trim().toLowerCase())
      .filter((t) => t.length > 0 && t.length < 30)
      .slice(0, 3); // üîß –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–µ–≥–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞

    console.log(`üéØ Enhanced search "${query}" ‚Üí ${enhancedTags.length} tags:`, enhancedTags);

    return {
      originalQuery: query,
      enhancedTags,
    };
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", err);
    return { originalQuery: query, enhancedTags: [] };
  }
}