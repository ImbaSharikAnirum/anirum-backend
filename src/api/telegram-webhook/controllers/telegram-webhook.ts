/**
 * Telegram Webhook controller for handling bot commands
 */

import crypto from 'crypto';
import telegramService from '../../phone-verification/services/telegram';

// –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º —Å–µ—Å—Å–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ Redis)
const verificationSessions = new Map();

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      username?: string;
      language_code?: string;
    };
    chat: {
      id: number;
      first_name: string;
      username?: string;
      type: string;
    };
    date: number;
    text?: string;
  };
}

export default {
  /**
   * Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –±–æ—Ç–∞
   * POST /api/telegram-webhook
   */
  async webhook(ctx) {
    try {
      const update: TelegramUpdate = ctx.request.body;
      console.log('üì• Telegram Webhook –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', JSON.stringify(update, null, 2));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!update.message || !update.message.text) {
        return ctx.send({ ok: true });
      }

      const message = update.message;
      const text = message.text;
      const chatId = message.chat.id;
      const username = message.from.username;

      console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${username} (${chatId}): ${text}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (text.startsWith('/start verify_')) {
        await this.handleVerificationStart(chatId, username, text);
      }
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É /start
      else if (text === '/start') {
        await this.handleStart(chatId, username);
      }

      return ctx.send({ ok: true });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Telegram webhook:', error);
      return ctx.internalServerError('Webhook error');
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start verify_HASH
   */
  async handleVerificationStart(chatId: number, username: string, text: string) {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à –∏–∑ –∫–æ–º–∞–Ω–¥—ã
      const verifyMatch = text.match(/\/start verify_([a-zA-Z0-9]+)/);
      if (!verifyMatch) {
        await telegramService.sendMessage(String(chatId), '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
        return;
      }

      const verificationHash = verifyMatch[1];
      console.log(`üîê –ó–∞–ø—Ä–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ö–µ—à–µ–º: ${verificationHash}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const session = verificationSessions.get(verificationHash);
      if (!session) {
        await telegramService.sendMessage(String(chatId),
          '‚ùå –°–µ—Å—Å–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ username
      if (session.username !== username) {
        await telegramService.sendMessage(String(chatId),
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
      session.chatId = chatId;
      session.activated = true;
      verificationSessions.set(verificationHash, session);

      console.log(`‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è @${username} (${chatId})`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      await telegramService.sendMessage(String(chatId), session.verificationMessage);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      await telegramService.sendMessage(String(chatId),
        '‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      await telegramService.sendMessage(String(chatId),
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start
   */
  async handleStart(chatId: number, username: string) {
    try {
      const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Anirum!

–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.

–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:
1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å Telegram"
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

@${username}, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!`;

      await telegramService.sendMessage(String(chatId), welcomeMessage);
      console.log(`üëã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è @${username}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
    }
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ Deep Link
   * POST /api/telegram-webhook/create-verification-session
   */
  async createVerificationSession(ctx) {
    try {
      const { username, code } = ctx.request.body;
      const userId = ctx.state.user?.id;

      if (!userId) {
        return ctx.unauthorized('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      if (!username || !code) {
        return ctx.badRequest('Username –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–µ—Å—Å–∏–∏
      const verificationHash = crypto.randomBytes(16).toString('hex');

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username
      const normalizedUsername = username.startsWith('@') ? username.slice(1) : username;

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
      const verificationMessage = `üîê <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Anirum:</b> <code>${code}</code>

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω <b>5 –º–∏–Ω—É—Ç</b>.

‚ö†Ô∏è <i>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!</i>`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
      const session = {
        hash: verificationHash,
        username: normalizedUsername,
        userId: userId,
        code: code,
        verificationMessage: verificationMessage,
        chatId: null,
        activated: false,
        createdAt: new Date(),
        expiresAt: new Date(Date.now() + 5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç
      };

      verificationSessions.set(verificationHash, session);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Deep Link
      const botUsername = 'anirum_v2_bot'; // –∏–º—è –±–æ—Ç–∞ –±–µ–∑ @
      const deepLink = `https://t.me/${botUsername}?start=verify_${verificationHash}`;

      console.log(`üîó –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @${normalizedUsername}: ${verificationHash}`);

      return ctx.send({
        success: true,
        verificationHash: verificationHash,
        deepLink: deepLink,
        message: '–°–µ—Å—Å–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞'
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return ctx.internalServerError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏');
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * GET /api/telegram-webhook/verification-status/:hash
   */
  async getVerificationStatus(ctx) {
    try {
      const { hash } = ctx.params;
      const session = verificationSessions.get(hash);

      if (!session) {
        return ctx.notFound('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
      if (new Date() > session.expiresAt) {
        verificationSessions.delete(hash);
        return ctx.badRequest('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
      }

      return ctx.send({
        activated: session.activated,
        chatId: session.chatId,
        username: session.username,
        expiresAt: session.expiresAt
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏:', error);
      return ctx.internalServerError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
  },

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ cron)
   */
  cleanupExpiredSessions() {
    const now = new Date();
    let cleaned = 0;

    for (const [hash, session] of verificationSessions) {
      if (now > session.expiresAt) {
        verificationSessions.delete(hash);
        cleaned++;
      }
    }

    if (cleaned > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏`);
    }
  }
};