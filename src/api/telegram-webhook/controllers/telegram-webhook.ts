/**
 * Telegram Webhook controller –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–æ–≤
 */

import pendingSessions from '../../phone-verification/services/pending-sessions';

// –¢–∏–ø—ã –¥–ª—è Telegram Bot API
interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
      language_code?: string;
    };
    chat: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
      type: string;
    };
    date: number;
    text?: string;
  };
}

interface TelegramApiResponse {
  ok: boolean;
  result?: any;
  error_code?: number;
  description?: string;
}

export default {
  /**
   * Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –±–æ—Ç–∞
   * POST /api/telegram-webhook
   */
  async webhook(ctx) {
    try {
      const update: TelegramUpdate = ctx.request.body;

      console.log('üì• Telegram Webhook –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:');
      console.log(JSON.stringify(update, null, 2));

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (update.message) {
        const { message } = update;
        const { chat, from, text, date } = message;

        console.log('üì® === –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===');
        console.log(`üë§ –û—Ç: ${from.first_name} ${from.last_name || ''} (@${from.username || '–±–µ–∑ username'})`);
        console.log(`üÜî User ID: ${from.id}`);
        console.log(`üí¨ Chat ID: ${chat.id}`);
        console.log(`üìù –¢–µ–∫—Å—Ç: "${text || '[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]'}"`);
        console.log(`üïê –í—Ä–µ–º—è: ${new Date(date * 1000).toLocaleString('ru-RU')}`);
        console.log(`üì± –¢–∏–ø —á–∞—Ç–∞: ${chat.type}`);
        console.log('========================');

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
        if (text === '/start' || text.startsWith('/start')) {
          await this.handleStartCommand(chat.id, from.username, text);
        }
      }

      return ctx.send({ ok: true });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Telegram webhook:', error);
      return ctx.send({ ok: true }); // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok –¥–ª—è Telegram
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π pending —Å–µ—Å—Å–∏–π
   */
  async handleStartCommand(chatId: number, username: string | undefined, text: string) {
    try {
      if (!username) {
        await this.sendMessage(chatId, '‚ùå –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.');
        return;
      }

      console.log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç @${username} (${chatId})`);

      // –ò—â–µ–º pending —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ username
      const session = pendingSessions.findPendingSessionByUsername(username);

      if (session) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ pending —Å–µ—Å—Å–∏—è: ${session.id}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å chat_id
        const updated = pendingSessions.updateSessionWithChatId(session.id, chatId);

        if (updated) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
          const codeMessage = `üîê <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Anirum:</b> <code>${session.code}</code>

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω <b>5 –º–∏–Ω—É—Ç</b>.

‚ö†Ô∏è <i>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!</i>

‚úÖ –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.`;

          await this.sendMessage(chatId, codeMessage);

          // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π
          pendingSessions.markCodeAsDelivered(session.id);

          console.log(`‚úÖ –ö–æ–¥ ${session.code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username} (${chatId})`);
        } else {
          await this.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
        }
      } else {
        // –ù–µ—Ç pending —Å–µ—Å—Å–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await this.sendWelcomeMessage(chatId, username);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–≥–¥–∞ –Ω–µ—Ç pending —Å–µ—Å—Å–∏–π)
   */
  async sendWelcomeMessage(chatId: number, username: string) {
    const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, @${username}!

–≠—Ç–æ –±–æ—Ç Anirum –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.

üîê <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>
1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à username (@${username}) –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞
4. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

üì± Chat ID: <code>${chatId}</code>
üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

<i>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!</i>`;

    await this.sendMessage(chatId, welcomeMessage);
    console.log(`üëã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è @${username} (${chatId})`);
  },

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async sendMessage(chatId: number, text: string) {
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;

      if (!botToken) {
        console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        return;
      }

      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'HTML'
        }),
      });

      const result = await response.json() as TelegramApiResponse;

      if (result.ok) {
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, result);
      }

      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  },

  /**
   * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –≤ Telegram
   * POST /api/telegram-webhook/setup
   */
  async setupWebhook(ctx) {
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      const baseUrl = process.env.URL || 'https://anirum.up.railway.app';

      if (!botToken) {
        return ctx.badRequest('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }

      const webhookUrl = `${baseUrl}/api/telegram-webhook`;

      console.log(`üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: ${webhookUrl}`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      const response = await fetch(`https://api.telegram.org/bot${botToken}/setWebhook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: webhookUrl,
          allowed_updates: ['message'],
          drop_pending_updates: true
        }),
      });

      const result = await response.json() as TelegramApiResponse;

      if (!result.ok) {
        throw new Error(`Telegram API Error: ${result.description}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
      const webhookInfoResponse = await fetch(`https://api.telegram.org/bot${botToken}/getWebhookInfo`);
      const webhookInfo = await webhookInfoResponse.json() as TelegramApiResponse;

      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', webhookInfo.result);

      return ctx.send({
        success: true,
        message: 'Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        webhookUrl,
        webhookInfo: webhookInfo.ok ? webhookInfo.result : null
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
      return ctx.internalServerError(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ${error.message}`);
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
   * GET /api/telegram-webhook/info
   */
  async getWebhookInfo(ctx) {
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;

      if (!botToken) {
        return ctx.badRequest('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const response = await fetch(`https://api.telegram.org/bot${botToken}/getWebhookInfo`);
      const result = await response.json() as TelegramApiResponse;

      if (!result.ok) {
        throw new Error(`Telegram API Error: ${result.description}`);
      }

      return ctx.send({
        success: true,
        webhookInfo: result.result
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', error);
      return ctx.internalServerError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
};