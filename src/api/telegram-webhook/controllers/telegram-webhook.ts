/**
 * Telegram Webhook controller –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */

// –¢–∏–ø—ã –¥–ª—è Telegram Bot API
interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
      language_code?: string;
    };
    chat: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
      type: string;
    };
    date: number;
    text?: string;
  };
}

interface TelegramApiResponse {
  ok: boolean;
  result?: any;
  error_code?: number;
  description?: string;
}

export default {
  /**
   * Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –±–æ—Ç–∞
   * POST /api/telegram-webhook
   */
  async webhook(ctx) {
    try {
      const update: TelegramUpdate = ctx.request.body;

      console.log('üì• Telegram Webhook –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:');
      console.log(JSON.stringify(update, null, 2));

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (update.message) {
        const { message } = update;
        const { chat, from, text, date } = message;

        console.log('üì® === –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===');
        console.log(`üë§ –û—Ç: ${from.first_name} ${from.last_name || ''} (@${from.username || '–±–µ–∑ username'})`);
        console.log(`üÜî User ID: ${from.id}`);
        console.log(`üí¨ Chat ID: ${chat.id}`);
        console.log(`üìù –¢–µ–∫—Å—Ç: "${text || '[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]'}"`);
        console.log(`üïê –í—Ä–µ–º—è: ${new Date(date * 1000).toLocaleString('ru-RU')}`);
        console.log(`üì± –¢–∏–ø —á–∞—Ç–∞: ${chat.type}`);
        console.log('========================');

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (text === '/start') {
          await this.sendWelcomeMessage(chat.id);
        }
      }

      return ctx.send({ ok: true });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Telegram webhook:', error);
      return ctx.send({ ok: true }); // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok –¥–ª—è Telegram
    }
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async sendWelcomeMessage(chatId: number) {
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;

      if (!botToken) {
        console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        return;
      }

      const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç Anirum.

–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞–ª –≤ –ª–æ–≥–∏:
- Chat ID: ${chatId}
- –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!`;

      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: welcomeMessage,
          parse_mode: 'HTML'
        }),
      });

      const result = await response.json() as TelegramApiResponse;

      if (result.ok) {
        console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, result);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  },

  /**
   * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –≤ Telegram
   * POST /api/telegram-webhook/setup
   */
  async setupWebhook(ctx) {
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      const baseUrl = process.env.URL || 'https://anirum.up.railway.app';

      if (!botToken) {
        return ctx.badRequest('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }

      const webhookUrl = `${baseUrl}/api/telegram-webhook`;

      console.log(`üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: ${webhookUrl}`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      const response = await fetch(`https://api.telegram.org/bot${botToken}/setWebhook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: webhookUrl,
          allowed_updates: ['message'],
          drop_pending_updates: true
        }),
      });

      const result = await response.json() as TelegramApiResponse;

      if (!result.ok) {
        throw new Error(`Telegram API Error: ${result.description}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
      const webhookInfoResponse = await fetch(`https://api.telegram.org/bot${botToken}/getWebhookInfo`);
      const webhookInfo = await webhookInfoResponse.json() as TelegramApiResponse;

      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', webhookInfo.result);

      return ctx.send({
        success: true,
        message: 'Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        webhookUrl,
        webhookInfo: webhookInfo.ok ? webhookInfo.result : null
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
      return ctx.internalServerError(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ${error.message}`);
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
   * GET /api/telegram-webhook/info
   */
  async getWebhookInfo(ctx) {
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;

      if (!botToken) {
        return ctx.badRequest('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const response = await fetch(`https://api.telegram.org/bot${botToken}/getWebhookInfo`);
      const result = await response.json() as TelegramApiResponse;

      if (!result.ok) {
        throw new Error(`Telegram API Error: ${result.description}`);
      }

      return ctx.send({
        success: true,
        webhookInfo: result.result
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', error);
      return ctx.internalServerError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
};