/**
 * invoice controller
 */

import { factories } from '@strapi/strapi'
import axios from 'axios'
import crypto from 'crypto'

export default factories.createCoreController('api::invoice.invoice', ({ strapi }) => ({
  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Tinkoff
   */
  async createTinkoffPayment(ctx) {
    const {
      users_permissions_user: userId,
      student,
      course: courseId,
      amount,
      currency,
      invoiceId,
    } = ctx.request.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!amount || !currency || !courseId) {
      return ctx.throw(
        400,
        "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: amount, currency, course"
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userEmail = "guest@anirum.com"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (userId) {
      try {
        const user = await strapi.documents("plugin::users-permissions.user").findOne({
          documentId: userId,
          fields: ["email"],
        });

        if (user && user.email) {
          userEmail = user.email;
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –ø–æ documentId
    let courseName = "–ö—É—Ä—Å";
    try {
      const course = await strapi.documents("api::course.course").findOne({
        documentId: courseId,
        fields: ["direction"],
      });
        
      if (course && course.direction) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º enum –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        const directionNames = {
          sketching: "–°–∫–µ—Ç—á–∏–Ω–≥",
          drawing2d: "2D —Ä–∏—Å–æ–≤–∞–Ω–∏–µ",
          animation: "–ê–Ω–∏–º–∞—Ü–∏—è", 
          modeling3d: "3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"
        };
        courseName = directionNames[course.direction] || course.direction;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", error);
    }

    const orderId = invoiceId
      ? `order_invoice_${invoiceId}_${Date.now()}`
      : `order_course_${courseId}_${Date.now()}`;

    const terminalKey = process.env.TINKOFF_TERMINAL_KEY?.trim();
    const terminalPassword = process.env.TINKOFF_TERMINAL_PASSWORD?.trim();

    if (!terminalKey || !terminalPassword) {
      return ctx.throw(500, "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏ –¥–ª—è Tinkoff");
    }

    const amountInCoins = Math.round(amount * 100);

    const paramsForToken = {
      TerminalKey: terminalKey,
      Amount: amountInCoins,
      OrderId: orderId,
      Description: `–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞: ${courseName}`,
    };

    const generateToken = (params, password) => {
      const tokenParams = { ...params, Password: password };
      const sortedKeys = Object.keys(tokenParams).sort();
      const tokenString = sortedKeys.map((key) => tokenParams[key]).join("");

      const hash = crypto
        .createHash("sha256")
        .update(tokenString)
        .digest("hex");

      return hash;
    };

    const token = generateToken(paramsForToken, terminalPassword);

    const requestData = {
      ...paramsForToken,
      Token: token,
      DATA: {
        Email: userEmail,
      },
      Receipt: {
        Email: userEmail,
        Taxation: "usn_income",
        Items: [
          {
            Name: courseName,
            Price: amountInCoins,
            Quantity: 1,
            Amount: amountInCoins,
            Tax: "none",
          },
        ],
      },
    };

    try {
      console.log("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Tinkoff API:", {
        orderId,
        amount: amountInCoins,
        userEmail,
        invoiceId,
        courseId,
      });

      const apiUrl = "https://securepay.tinkoff.ru/v2/Init";

      const response = await axios.post(apiUrl, requestData, {
        headers: { "Content-Type": "application/json" },
      });

      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Tinkoff API:", response.data);

      if (response.data.Success) {
        ctx.send({
          paymentUrl: response.data.PaymentURL,
          orderId,
          message: "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞",
        });
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ Tinkoff API:", response.data);
        ctx.throw(400, `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${response.data.Message}`);
      }
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ Tinkoff Init:",
        error.response?.data || error.message
      );
      ctx.throw(500, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Tinkoff –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  async handleTinkoffNotification(ctx) {
    const { OrderId, Success, Status, PaymentId } = ctx.request.body;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º invoiceId –∏–∑ OrderId
    let invoiceId = null;
    if (OrderId?.startsWith("order_invoice_")) {
      // –§–æ—Ä–º–∞—Ç: order_invoice_123_1703123456789
      const parts = OrderId.split("_");
      if (parts.length >= 3) {
        invoiceId = parts[2];
      }
    }

    try {
      if (Success && Status === "CONFIRMED" && invoiceId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º invoice –ø–æ documentId –∏—Å–ø–æ–ª—å–∑—É—è Document Service API
        try {
          await strapi.documents("api::invoice.invoice").update({
            documentId: invoiceId,
            data: {
              statusPayment: true,
              paymentId: PaymentId || null,
              paymentDate: new Date(),
            },
          });
          
          console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è invoice ${invoiceId}`);
          return ctx.send({ status: "ok" });
        } catch (updateError) {
          console.log(`‚ùå Invoice —Å documentId ${invoiceId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateError);
          return ctx.send({ status: "Invoice not found or update failed" });
        }
      } else {
        console.log(
          "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω invoiceId:",
          Status
        );
        return ctx.send({ status: "Payment not confirmed" });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
      return ctx.throw(500, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
    }
  },
}));
