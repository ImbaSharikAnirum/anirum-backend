/**
 * phone-verification controller
 */

import bcrypt from 'bcrypt';
import dayjs from 'dayjs';
import whatsappService from '../services/whatsapp';
import telegramService from '../services/telegram';

// –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ Redis)
const verificationCodes = new Map();

export default {
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   * POST /api/phone-verification/send-code
   */
  async sendCode(ctx) {
    try {
      const { phone, messenger = 'whatsapp' } = ctx.request.body;
      const userId = ctx.state.user?.id;

      if (!userId) {
        return ctx.unauthorized('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
      if (messenger === 'whatsapp') {
        if (!phone || !phone.trim()) {
          return ctx.badRequest('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è WhatsApp');
        }
      } else if (messenger === 'telegram') {
        if (!phone || !phone.trim()) {
          return ctx.badRequest('Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Telegram');
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å @ –∏–ª–∏ –±–µ–∑)
        const usernameRegex = /^@?[a-zA-Z0-9_]{5,32}$/;
        const cleanUsername = phone.replace('@', '');
        if (!usernameRegex.test(cleanUsername)) {
          return ctx.badRequest('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç @username –∏–ª–∏ username');
        }
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
      const normalizedContact = messenger === 'whatsapp'
        ? phone.replace(/[^\d+]/g, '') // –î–ª—è WhatsApp - —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ +
        : phone.trim(); // –î–ª—è Telegram - –æ—Å—Ç–∞–≤–ª—è–µ–º username –∫–∞–∫ –µ—Å—Ç—å

      console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è ${normalizedContact} (${messenger}), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`);

      // Rate limiting - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–ø—Ä–∞–≤–∫—É
      const key = `${normalizedContact}_${userId}`;
      const lastAttempt = verificationCodes.get(key);

      if (lastAttempt && dayjs().diff(dayjs(lastAttempt.createdAt), 'minute') < 1) {
        return ctx.badRequest('–ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
      const code = Math.floor(100000 + Math.random() * 900000).toString();
      const codeHash = await bcrypt.hash(code, 10);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
      verificationCodes.set(key, {
        codeHash,
        phone: normalizedContact, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        messenger,
        userId,
        attempts: 0,
        createdAt: new Date(),
        expiresAt: dayjs().add(5, 'minute').toDate()
      });

      console.log(`üîê –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${normalizedContact}: ${code}`);

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
        if (messenger === 'whatsapp') {
          const result = await whatsappService.sendVerificationCode(normalizedContact, code);
          console.log(`üì§ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Green API:`, result);
        } else if (messenger === 'telegram') {
          // –î–ª—è Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Bot API
          try {
            const result = await telegramService.sendVerificationCode(normalizedContact, code);
            console.log(`üì§ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Bot API:`, result);
          } catch (telegramError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:`, telegramError);

            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º Deep Link –∫–∞–∫ fallback
            const botUsername = process.env.TELEGRAM_BOT_USERNAME || 'anirum_v2_bot';
            const deepLink = `https://t.me/${botUsername}?start=getcode`;

            return ctx.send({
              success: true,
              message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –Ω–∞–ø—Ä—è–º—É—é. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç –≤ Telegram',
              phone: normalizedContact,
              telegram: {
                requiresDeepLink: true,
                deepLink: deepLink,
                instructions: `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ: /getcode ${normalizedContact} ${code}`,
                fallbackCode: code
              }
            });
          }
        }

        return ctx.send({
          success: true,
          message: `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ${messenger === 'whatsapp' ? 'WhatsApp' : 'Telegram'}`,
          phone: normalizedContact
        });

      } catch (sendError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ ${messenger}:`, sendError);
        // –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        verificationCodes.delete(key);
        return ctx.badRequest(sendError.message || `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ ${messenger}.`);
      }

    } catch (error: unknown) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendCode:', error);
      return ctx.internalServerError('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * POST /api/phone-verification/verify-code
   */
  async verifyCode(ctx) {
    try {
      const { phone, code } = ctx.request.body;
      const userId = ctx.state.user?.id;

      if (!userId) {
        return ctx.unauthorized('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      if (!phone || !code) {
        return ctx.badRequest('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç (–¥–ª—è WhatsApp - –Ω–æ–º–µ—Ä, –¥–ª—è Telegram - username)
      const normalizedContact = phone.trim();
      const normalizedCode = code.replace(/\D/g, ''); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã

      if (normalizedCode.length !== 6) {
        return ctx.badRequest('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä');
      }

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–ª—è ${normalizedContact}, –∫–æ–¥: ${normalizedCode}`);

      const key = `${normalizedContact}_${userId}`;
      const verification = verificationCodes.get(key);

      if (!verification) {
        return ctx.badRequest('–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      if (dayjs().isAfter(dayjs(verification.expiresAt))) {
        verificationCodes.delete(key);
        return ctx.badRequest('–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      if (verification.attempts >= 3) {
        verificationCodes.delete(key);
        return ctx.badRequest('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.');
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      verification.attempts += 1;
      verificationCodes.set(key, verification);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
      const isValidCode = await bcrypt.compare(normalizedCode, verification.codeHash);

      if (!isValidCode) {
        console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è ${normalizedContact}. –ü–æ–ø—ã—Ç–∫–∞ ${verification.attempts}/3`);
        return ctx.badRequest(`–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${3 - verification.attempts}`);
      }

      // –£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è!
      console.log(`‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è ${normalizedContact} (${verification.messenger})`);

      // –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
      verificationCodes.delete(key);

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const verificationField = verification.messenger === 'whatsapp'
          ? 'whatsapp_phone_verified'
          : 'telegram_phone_verified';

        // @ts-ignore - Strapi typing
        await strapi.plugins['users-permissions'].services.user.edit(userId, {
          [verificationField]: true
        });

        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${verificationField} = true –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        return ctx.send({
          success: true,
          message: verification.messenger === 'whatsapp'
            ? '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
            : 'Username —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
          verified: true,
          messenger: verification.messenger
        });

      } catch (updateError: unknown) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', updateError);
        return ctx.internalServerError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      }

    } catch (error: unknown) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ verifyCode:', error);
      return ctx.internalServerError('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   * GET /api/phone-verification/status
   */
  async getStatus(ctx) {
    const userId = ctx.state.user?.id;

    if (!userId) {
      return ctx.unauthorized('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }

    try {
      // @ts-ignore - Strapi typing
      const user = await strapi.plugins['users-permissions'].services.user.fetch({ id: userId });

      return ctx.send({
        whatsapp_verified: !!user.whatsapp_phone_verified,
        telegram_verified: !!user.telegram_phone_verified,
        active_codes: Array.from(verificationCodes.keys()).filter(key => key.endsWith(`_${userId}`)).length
      });

    } catch (error: unknown) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      return ctx.internalServerError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
  }
};