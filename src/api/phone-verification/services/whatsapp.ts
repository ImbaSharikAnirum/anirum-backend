/**
 * WhatsApp service for sending verification codes via Green API
 */

interface GreenApiConfig {
  apiUrl: string;
  idInstance: string;
  apiTokenInstance: string;
}

interface SendMessagePayload {
  chatId: string;
  message: string;
}

interface SendMessageResponse {
  idMessage?: string;
  error?: string;
}

export default {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Green API –∏–∑ environment variables
   */
  getGreenApiConfig(): GreenApiConfig {
    const apiUrl = process.env.GREEN_API_URL;
    const idInstance = process.env.GREEN_API_ID_INSTANCE;
    const apiTokenInstance = process.env.GREEN_API_TOKEN_INSTANCE;

    if (!apiUrl || !idInstance || !apiTokenInstance) {
      throw new Error('Green API configuration is missing. Check environment variables.');
    }

    return {
      apiUrl,
      idInstance,
      apiTokenInstance,
    };
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Green API
   */
  async sendMessage(phone: string, message: string): Promise<SendMessageResponse> {
    try {
      const config = this.getGreenApiConfig();

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Green API
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä (–≤–∫–ª—é—á–∞—è +)
      let normalizedPhone = phone.replace(/[^\d]/g, '');

      // –î–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –∞ –Ω–µ 8
      if (normalizedPhone.startsWith('8') && normalizedPhone.length === 11) {
        normalizedPhone = '7' + normalizedPhone.slice(1);
      }

      const chatId = normalizedPhone.endsWith('@c.us')
        ? normalizedPhone
        : `${normalizedPhone}@c.us`;

      console.log(`üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞: "${phone}" ‚Üí "${normalizedPhone}" ‚Üí "${chatId}"`);

      // URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const url = `https://${config.apiUrl}/waInstance${config.idInstance}/sendMessage/${config.apiTokenInstance}`;

      const payload: SendMessagePayload = {
        chatId,
        message,
      };

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ${chatId}`);
      console.log(`üîó URL: ${url}`);
      console.log(`üìã Payload:`, JSON.stringify(payload, null, 2));

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const data = await response.json() as any;
      console.log(`üì• Green API –æ—Ç–≤–µ—Ç:`, data);

      if (!response.ok) {
        throw new Error(`Green API error: ${data.error || 'Unknown error'}`);
      }

      return {
        idMessage: data.idMessage,
      };

    } catch (error: unknown) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async sendVerificationCode(phone: string, code: string): Promise<SendMessageResponse> {
    const message = `üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Anirum: ${code}\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.\n\n*–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!*`;

    return this.sendMessage(phone, message);
  },
};