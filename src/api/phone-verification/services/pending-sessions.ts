/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è pending —Å–µ—Å—Å–∏—è–º–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram
 */

interface PendingSession {
  id: string;
  username: string; // –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –±–µ–∑ @
  code: string;
  userId: number;
  userDocumentId: string;
  messenger: 'telegram';
  createdAt: Date;
  expiresAt: Date;
  chatId?: number; // –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç /start
  codeDelivered?: boolean; // true –∫–æ–≥–¥–∞ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
}

// –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º pending —Å–µ—Å—Å–∏–∏ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ Redis)
const pendingSessions = new Map<string, PendingSession>();

export default {
  /**
   * –°–æ–∑–¥–∞—Ç—å pending —Å–µ—Å—Å–∏—é –¥–ª—è Telegram –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  createPendingSession(data: {
    username: string;
    code: string;
    userId: number;
    userDocumentId: string;
  }): PendingSession {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username (—É–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å)
    const normalizedUsername = data.username.startsWith('@')
      ? data.username.slice(1)
      : data.username;

    const sessionId = `telegram_${normalizedUsername}_${Date.now()}`;

    const session: PendingSession = {
      id: sessionId,
      username: normalizedUsername,
      code: data.code,
      userId: data.userId,
      userDocumentId: data.userDocumentId,
      messenger: 'telegram',
      createdAt: new Date(),
      expiresAt: new Date(Date.now() + 5 * 60 * 1000), // 5 –º–∏–Ω—É—Ç
      chatId: undefined,
      codeDelivered: false
    };

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ username
    this.cleanupUserSessions(normalizedUsername);

    pendingSessions.set(sessionId, session);

    console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∞ pending —Å–µ—Å—Å–∏—è –¥–ª—è @${normalizedUsername}: ${sessionId}`);
    console.log(`üìù –ö–æ–¥: ${data.code}, –∏—Å—Ç–µ–∫–∞–µ—Ç: ${session.expiresAt.toLocaleString('ru-RU')}`);

    return session;
  },

  /**
   * –ù–∞–π—Ç–∏ pending —Å–µ—Å—Å–∏—é –ø–æ username
   */
  findPendingSessionByUsername(username: string): PendingSession | null {
    const normalizedUsername = username.startsWith('@')
      ? username.slice(1)
      : username;

    for (const [sessionId, session] of pendingSessions) {
      if (session.username === normalizedUsername) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        if (new Date() > session.expiresAt) {
          this.deletePendingSession(sessionId);
          return null;
        }
        return session;
      }
    }

    return null;
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é —Å chat_id –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª /start
   */
  updateSessionWithChatId(sessionId: string, chatId: number): boolean {
    const session = pendingSessions.get(sessionId);

    if (!session) {
      console.log(`‚ùå –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
    if (new Date() > session.expiresAt) {
      this.deletePendingSession(sessionId);
      console.log(`‚ùå –°–µ—Å—Å–∏—è ${sessionId} –∏—Å—Ç–µ–∫–ª–∞`);
      return false;
    }

    session.chatId = chatId;
    pendingSessions.set(sessionId, session);

    console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å chat_id: ${chatId}`);
    return true;
  },

  /**
   * –ü–æ–º–µ—Ç–∏—Ç—å –∫–æ–¥ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π
   */
  markCodeAsDelivered(sessionId: string): boolean {
    const session = pendingSessions.get(sessionId);

    if (!session) {
      return false;
    }

    session.codeDelivered = true;
    pendingSessions.set(sessionId, session);

    console.log(`üì§ –ö–æ–¥ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);
    return true;
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å pending —Å–µ—Å—Å–∏—é
   */
  deletePendingSession(sessionId: string): boolean {
    const deleted = pendingSessions.delete(sessionId);
    if (deleted) {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è ${sessionId}`);
    }
    return deleted;
  },

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ username)
   */
  cleanupUserSessions(username: string): void {
    const normalizedUsername = username.startsWith('@')
      ? username.slice(1)
      : username;

    let cleanedCount = 0;
    for (const [sessionId, session] of pendingSessions) {
      if (session.username === normalizedUsername) {
        pendingSessions.delete(sessionId);
        cleanedCount++;
      }
    }

    if (cleanedCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è @${normalizedUsername}`);
    }
  },

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ cron)
   */
  cleanupExpiredSessions(): void {
    const now = new Date();
    let cleanedCount = 0;

    for (const [sessionId, session] of pendingSessions) {
      if (now > session.expiresAt) {
        pendingSessions.delete(sessionId);
        cleanedCount++;
      }
    }

    if (cleanedCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π`);
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É pending —Å–µ—Å—Å–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  getSessionStats(): {
    total: number;
    pending: number;
    withChatId: number;
    delivered: number;
  } {
    let pending = 0;
    let withChatId = 0;
    let delivered = 0;

    for (const [, session] of pendingSessions) {
      pending++;
      if (session.chatId) withChatId++;
      if (session.codeDelivered) delivered++;
    }

    return {
      total: pendingSessions.size,
      pending,
      withChatId,
      delivered
    };
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  getAllSessions(): PendingSession[] {
    return Array.from(pendingSessions.values());
  }
};