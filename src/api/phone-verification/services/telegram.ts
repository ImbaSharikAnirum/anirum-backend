/**
 * Telegram service for sending verification codes via Bot API
 */

interface TelegramBotConfig {
  botToken: string;
  apiUrl: string;
}

interface SendMessagePayload {
  chat_id: string;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
}

interface SendMessageResponse {
  ok: boolean;
  result?: {
    message_id: number;
    chat: {
      id: number;
      username?: string;
      type: string;
    };
  };
  error_code?: number;
  description?: string;
}

export default {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram Bot –∏–∑ environment variables
   */
  getTelegramBotConfig(): TelegramBotConfig {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;

    if (!botToken) {
      throw new Error('Telegram Bot configuration is missing. Check TELEGRAM_BOT_TOKEN environment variable.');
    }

    return {
      botToken,
      apiUrl: 'api.telegram.org',
    };
  },

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username (—É–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å)
   */
  normalizeUsername(username: string): string {
    return username.startsWith('@') ? username.slice(1) : username;
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
   */
  async sendMessage(username: string, message: string): Promise<SendMessageResponse> {
    try {
      const config = this.getTelegramBotConfig();
      const normalizedUsername = this.normalizeUsername(username);

      console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è @${normalizedUsername}`);

      // URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const url = `https://${config.apiUrl}/bot${config.botToken}/sendMessage`;

      const payload: SendMessagePayload = {
        chat_id: `@${normalizedUsername}`,
        text: message,
        parse_mode: 'HTML'
      };

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ @${normalizedUsername}`);
      console.log(`üîó URL: ${url}`);
      console.log(`üìã Payload:`, JSON.stringify(payload, null, 2));

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const data = await response.json() as SendMessageResponse;
      console.log(`üì• Telegram Bot API –æ—Ç–≤–µ—Ç:`, data);

      if (!data.ok) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Telegram
        const errorMessage = this.handleTelegramError(data.error_code, data.description);
        throw new Error(errorMessage);
      }

      return data;

    } catch (error: unknown) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram Bot API
   */
  handleTelegramError(errorCode?: number, description?: string): string {
    switch (errorCode) {
      case 400:
        if (description?.includes('chat not found')) {
          return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.';
        }
        if (description?.includes('username invalid')) {
          return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç @username';
        }
        return '–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API';

      case 403:
        if (description?.includes('bot was blocked')) {
          return '–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.';
        }
        if (description?.includes('user is deactivated')) {
          return '–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
        }
        return '–î–æ—Å—Ç—É–ø –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.';

      case 429:
        return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';

      case 401:
        return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TELEGRAM_BOT_TOKEN.';

      default:
        return description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API';
    }
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async sendVerificationCode(username: string, code: string): Promise<SendMessageResponse> {
    const message = `üîê <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Anirum:</b> <code>${code}</code>

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω <b>5 –º–∏–Ω—É—Ç</b>.

‚ö†Ô∏è <i>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!</i>`;

    return this.sendMessage(username, message);
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async getBotInfo(): Promise<any> {
    try {
      const config = this.getTelegramBotConfig();
      const url = `https://${config.apiUrl}/bot${config.botToken}/getMe`;

      const response = await fetch(url);
      const data = await response.json();

      console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', data);
      return data;

    } catch (error: unknown) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      throw error;
    }
  },
};