/**
 * skill-tree controller
 */

import { factories } from '@strapi/strapi'

export default factories.createCoreController('api::skill-tree.skill-tree', ({ strapi }) => ({

  /**
   * Batch –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ã–∫–æ–≤ —Å –≥–∞–π–¥–∞–º–∏
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ
   *
   * POST /skill-trees/:documentId/publish
   * Body: {
   *   skills: [
   *     { tempId: 'temp-1', title: '–ù–∞–≤—ã–∫', position: {x, y}, imageId?: number, guideEdges?: [...] },
   *     { documentId: 'existing-123', title: '–ù–∞–≤—ã–∫', position: {x, y}, guideEdges?: [...] }
   *   ],
   *   skillEdges: [{ id, source, target, type }],
   *   deletedSkills: ['skill-documentId-1'],
   *   guides: [
   *     { tempId: 'temp-guide-1', title: '–ì–∞–π–¥', skillId: 'skill-123', imageId?: number, text?, link? },
   *     { id: 123, title: '–ì–∞–π–¥', skillId: 'skill-123' }
   *   ]
   * }
   */
  async publish(ctx: any) {
    const { id } = ctx.params
    const user = ctx.state.user

    if (!user) {
      return ctx.unauthorized('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    }

    const { skills = [], skillEdges = [], deletedSkills = [], guides = [] } = ctx.request.body

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü –¥–µ—Ä–µ–≤–∞ –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
      console.log('=== PUBLISH START ===')
      console.log('id from params:', id)
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞...')
      const tree = await strapi.entityService.findOne('api::skill-tree.skill-tree', id, {
        populate: {
          owner: true,
          skills: true
        }
      }) as any
      console.log('–î–µ—Ä–µ–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, id:', tree?.id, 'documentId:', tree?.documentId, 'skills:', tree?.skills?.length)

      if (!tree) {
        return ctx.notFound('–î–µ—Ä–µ–≤–æ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      }

      const isOwner = tree.owner?.documentId === user.documentId
      const isManager = user.role?.type === 'manager'

      if (!isOwner && !isManager) {
        return ctx.forbidden('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ—Ä–µ–≤–∞')
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–π id –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Å–≤—è–∑–µ–π
      const treeNumericId = tree.id

      // –°–æ–∑–¥–∞—ë–º –º–∞–ø–ø–∏–Ω–≥ documentId -> numeric id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
      const skillDocIdToNumericId = new Map<string, number>()
      tree.skills?.forEach((skill: any) => {
        skillDocIdToNumericId.set(skill.documentId, skill.id)
      })

      // –ú–∞–ø–ø–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ documentId
      const skillIdMap = new Map<string, string>()
      const guideIdMap = new Map<string, string>()

      // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
      console.log('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤:', deletedSkills)
      for (const skillDocId of deletedSkills) {
        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–≤—ã–∫ –≤ –¥–µ—Ä–µ–≤–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —á–∏—Å–ª–æ–≤–æ–π id
        const skillToDelete = tree.skills?.find((s: any) => s.documentId === skillDocId)
        if (skillToDelete) {
          console.log('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ —Å id:', skillToDelete.id)
          await strapi.entityService.delete('api::skill.skill', skillToDelete.id)
        }
      }

      // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤, –≤—Å–µ–≥–æ:', skills.length)
      console.log('üîç –ü–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫ (–ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç):', JSON.stringify(skills[0], null, 2))

      for (const skillData of skills) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º imageId, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ frontend
        const imageId = skillData.imageId

        console.log('üìù –ù–∞–≤—ã–∫:', skillData.title, 'imageId:', imageId, '—Ç–∏–ø imageId:', typeof imageId)

        if (skillData.documentId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞–≤—ã–∫
          const numericId = skillDocIdToNumericId.get(skillData.documentId)
          if (!numericId) {
            console.error('–ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', skillData.documentId)
            continue
          }

          console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞:', skillData.documentId, 'id:', numericId)
          const updateData: any = {
            title: skillData.title,
            position: skillData.position,
          }

          if (imageId) {
            updateData.image = imageId
          }

          await strapi.entityService.update('api::skill.skill', numericId, {
            data: updateData
          })
        } else if (skillData.tempId) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫
          console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ —Å treeNumericId:', treeNumericId)
          const createData: any = {
            title: skillData.title,
            position: skillData.position,
            skill_tree: treeNumericId,
          }

          if (imageId) {
            createData.image = imageId
          }

          const createdSkill = await strapi.entityService.create('api::skill.skill', {
            data: createData
          }) as any

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
          skillIdMap.set(skillData.tempId, createdSkill.documentId)
          console.log('–°–æ–∑–¥–∞–Ω –Ω–∞–≤—ã–∫:', createdSkill.documentId)
        }
      }

      // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∞–π–¥–æ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∞–π–¥–æ–≤, –≤—Å–µ–≥–æ:', guides.length)
      for (const guideData of guides) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º imageId, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ frontend
        const imageId = guideData.imageId

        console.log('–ì–∞–π–¥:', guideData.title, '–∏–º–µ–µ—Ç imageId:', imageId)

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π skillId (—Å —É—á–µ—Ç–æ–º –º–∞–ø–ø–∏–Ω–≥–∞)
        const realSkillDocId = skillIdMap.get(guideData.skillId) || guideData.skillId
        const realSkillNumericId = skillDocIdToNumericId.get(realSkillDocId)

        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∞–π–¥–∞: ${guideData.title}`)
        console.log(`  skillId –∏–∑ –¥–∞–Ω–Ω—ã—Ö: ${guideData.skillId}`)
        console.log(`  realSkillDocId: ${realSkillDocId}`)
        console.log(`  realSkillNumericId: ${realSkillNumericId}`)

        if (!realSkillNumericId) {
          console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è –Ω–∞–≤—ã–∫–∞ —Å documentId: ${realSkillDocId}`)
          continue
        }

        if (guideData.id) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–∞–π–¥ (–ø–æ–ª—É—á–µ–Ω numeric ID)
          console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥–∞–π–¥–∞ —Å id: ${guideData.id}`)
          const updateData: any = {
            title: guideData.title,
            text: guideData.text,
            link: guideData.link,
          }

          if (imageId) {
            updateData.image = imageId
          }

          await strapi.entityService.update('api::guide.guide', guideData.id, {
            data: updateData
          })

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –Ω–∞–≤—ã–∫–æ–º (–µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç)
          const skill = await strapi.entityService.findOne('api::skill.skill', realSkillNumericId, {
            populate: ['guides']
          }) as any

          const existingGuideIds = (skill.guides || []).map((g: any) => g.id)
          console.log(`–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–∞–π–¥—ã –Ω–∞–≤—ã–∫–∞ (id): ${existingGuideIds.join(', ')}`)

          if (!existingGuideIds.includes(guideData.id)) {
            // –ì–∞–π–¥ –Ω–µ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º –Ω–∞–≤—ã–∫–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å
            const updatedGuideIds = [...existingGuideIds, guideData.id]

            console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏: –Ω–∞–≤—ã–∫ ${realSkillNumericId} <- –≥–∞–π–¥ ${guideData.id}`)

            await strapi.entityService.update('api::skill.skill', realSkillNumericId, {
              data: {
                guides: updatedGuideIds
              } as any
            })
            console.log(`‚úÖ –°–≤—è–∑–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–∞–π–¥ (id: ${guideData.id}) —Å –Ω–∞–≤—ã–∫–æ–º ${realSkillDocId}`)
          } else {
            console.log(`–ì–∞–π–¥ (id: ${guideData.id}) —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –Ω–∞–≤—ã–∫–æ–º ${realSkillDocId}`)
          }
        } else if (guideData.tempId) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–∞–π–¥
          console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞: ${guideData.title}`)
          const createData: any = {
            title: guideData.title,
            text: guideData.text || '',
            link: guideData.link || '',
            approved: false,
            users_permissions_user: user.id,
          }

          if (imageId) {
            createData.image = imageId
          }

          const createdGuide = await strapi.entityService.create('api::guide.guide', {
            data: createData
          }) as any

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
          guideIdMap.set(guideData.tempId, createdGuide.documentId)
          console.log(`–°–æ–∑–¥–∞–Ω –≥–∞–π–¥ —Å documentId: ${createdGuide.documentId}`)

          // 5. –°–≤—è–∑—ã–≤–∞–µ–º –≥–∞–π–¥ —Å –Ω–∞–≤—ã–∫–æ–º (many-to-many relation)
          const skill = await strapi.entityService.findOne('api::skill.skill', realSkillNumericId, {
            populate: ['guides']
          }) as any

          // –°–æ–±–∏—Ä–∞–µ–º numeric ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–∞–π–¥–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
          const existingGuideIds = (skill.guides || []).map((g: any) => g.id)
          const updatedGuideIds = [...existingGuideIds, createdGuide.id]

          console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏: –Ω–∞–≤—ã–∫ ${realSkillNumericId} <- –Ω–æ–≤—ã–π –≥–∞–π–¥ ${createdGuide.id} (documentId: ${createdGuide.documentId})`)

          await strapi.entityService.update('api::skill.skill', realSkillNumericId, {
            data: {
              guides: updatedGuideIds
            } as any
          })
          console.log(`‚úÖ –°–≤—è–∑–∞–Ω –Ω–æ–≤—ã–π –≥–∞–π–¥ ${createdGuide.documentId} (id: ${createdGuide.id}) —Å –Ω–∞–≤—ã–∫–æ–º ${realSkillDocId}`)
        }
      }

      // 6. –û–±–Ω–æ–≤–ª—è–µ–º guideEdges –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–≤—ã–∫–∞
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ guideEdges –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤...')
      for (const skillData of skills) {
        if (skillData.guideEdges && skillData.guideEdges.length > 0) {
          console.log('–ù–∞–≤—ã–∫ –∏–º–µ–µ—Ç guideEdges:', skillData.title, '–∫–æ–ª-–≤–æ —Å–≤—è–∑–µ–π:', skillData.guideEdges.length)
          console.log('guideEdges –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', JSON.stringify(skillData.guideEdges))
          console.log('guideIdMap:', JSON.stringify(Object.fromEntries(guideIdMap)))

          // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ ID –≥–∞–π–¥–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
          const updatedGuideEdges = skillData.guideEdges.map((edge: any) => ({
            ...edge,
            source: guideIdMap.get(edge.source) || edge.source,
            target: guideIdMap.get(edge.target) || edge.target,
          }))

          console.log('guideEdges –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', JSON.stringify(updatedGuideEdges))

          const realSkillDocId = skillIdMap.get(skillData.tempId) || skillData.documentId

          await strapi.entityService.update('api::skill.skill', realSkillDocId, {
            data: {
              guideEdges: updatedGuideEdges
            }
          })
          console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã guideEdges –¥–ª—è –Ω–∞–≤—ã–∫–∞ ${realSkillDocId}`)
        }
      }

      // 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –¥–µ—Ä–µ–≤–∞ (–∑–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
      const updatedSkillEdges = skillEdges.map((edge: any) => ({
        ...edge,
        source: skillIdMap.get(edge.source) || edge.source,
        target: skillIdMap.get(edge.target) || edge.target,
      }))

      // 8. –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ —Å–æ —Å–≤—è–∑—è–º–∏
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å id:', id)
      const updatedTree = await strapi.entityService.update('api::skill-tree.skill-tree', id, {
        data: {
          skillEdges: updatedSkillEdges
        },
        populate: {
          image: true,
          owner: {
            fields: ['username', 'email']
          },
          skills: {
            populate: {
              image: true,
              guides: {
                populate: {
                  image: true
                }
              }
            }
          }
        }
      })

      const result = {
        tree: updatedTree,
        skillIdMap: Object.fromEntries(skillIdMap),
        guideIdMap: Object.fromEntries(guideIdMap)
      }

      return {
        data: result.tree,
        meta: {
          skillIdMap: result.skillIdMap,
          guideIdMap: result.guideIdMap
        }
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ã–∫–æ–≤:', error)
      return ctx.throw(500, '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ã–∫–æ–≤')
    }
  }

}));
