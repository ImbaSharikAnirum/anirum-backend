/**
 * guide controller
 */

import { factories } from '@strapi/strapi'
import { enhanceSearchQuery } from '../../../utils'

export default factories.createCoreController('api::guide.guide', ({ strapi }) => ({

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥–∞–π–¥—ã (—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫—Ä–µ–∞—Ç–∏–≤–æ–≤)
   * –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ creationsCount –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  async find(ctx: any) {
    const { query } = ctx

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ query
    const page = parseInt(query.pagination?.page) || 1
    const pageSize = parseInt(query.pagination?.pageSize) || 25

    // –ü–æ–ª—É—á–∞–µ–º –≥–∞–π–¥—ã —Å –Ω–∞—Ç–∏–≤–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ creationsCount –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const result = await strapi.entityService.findPage('api::guide.guide', {
      ...query,
      page,
      pageSize,
      filters: {
        ...query.filters,
        publishedAt: { $null: true } // –¢–æ–ª—å–∫–æ –¥—Ä–∞—Ñ—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)
      } as any,
      sort: {
        creationsCount: 'desc', // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—á–µ—Ç—á–∏–∫—É (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å)
        createdAt: 'desc',      // –ü—Ä–∏ —Ä–∞–≤–Ω–æ–º —Å—á–µ—Ç—á–∏–∫–µ - –ø–æ –¥–∞—Ç–µ
        id: 'desc'              // –ü—Ä–∏ —Ä–∞–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö - –ø–æ ID (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
      },
      populate: {
        image: {
          fields: ['url', 'alternativeText', 'formats']
        },
        users_permissions_user: {
          fields: ['username', 'email']
        },
        savedBy: {
          fields: ['id']
        }
      }
    })

    // findPage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { results: [], pagination: {} }
    return {
      data: result.results,
      meta: {
        pagination: result.pagination
      }
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ –ø–æ ID
   */
  async findOne(ctx: any) {
    const { id } = ctx.params
    const { query } = ctx

    const result = await strapi.entityService.findOne('api::guide.guide', id, {
      ...query,
      populate: {
        image: {
          fields: ['url', 'alternativeText', 'formats']
        },
        users_permissions_user: {
          fields: ['username', 'email']
        },
        savedBy: {
          fields: ['id']
        }
      }
    })

    return this.transformResponse(result)
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≥–∞–π–¥
   */
  async create(ctx: any) {
    const user = ctx.state.user

    if (!user) {
      return ctx.unauthorized('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    }

    const { data } = ctx.request.body

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–∞–π–¥—É
    const result = await strapi.entityService.create('api::guide.guide', {
      data: {
        ...data,
        users_permissions_user: user.documentId,
        approved: false, // –ù–æ–≤—ã–µ –≥–∞–π–¥—ã —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      } as any,
      populate: {
        image: {
          fields: ['url', 'alternativeText', 'formats']
        },
        users_permissions_user: {
          fields: ['username', 'email']
        }
      }
    })

    return this.transformResponse(result)
  },

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/—É–±—Ä–∞—Ç—å –≥–∞–π–¥ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
   */
  async toggleSave(ctx: any) {
    const user = ctx.state.user
    const { id } = ctx.params
    const { action } = ctx.request.body // 'save' –∏–ª–∏ 'unsave'

    if (!user) {
      return ctx.unauthorized('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    }

    try {
      const guide = await strapi.entityService.findOne('api::guide.guide', id, {
        populate: ['savedBy']
      }) as any

      if (!guide) {
        return ctx.notFound('–ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const savedByIds = guide.savedBy?.map((u: any) => u.documentId) || []
      const userDocumentId = user.documentId

      let newSavedBy
      if (action === 'save') {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ savedBy, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        if (!savedByIds.includes(userDocumentId)) {
          newSavedBy = [...savedByIds, userDocumentId]
        } else {
          return ctx.badRequest('–ì–∞–π–¥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        }
      } else if (action === 'unsave') {
        // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ savedBy
        newSavedBy = savedByIds.filter(id => id !== userDocumentId)
      } else {
        return ctx.badRequest('–î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å save –∏–ª–∏ unsave')
      }

      const result = await strapi.entityService.update('api::guide.guide', id, {
        data: {
          savedBy: newSavedBy
        } as any,
        populate: {
          image: {
            fields: ['url', 'alternativeText', 'formats']
          },
          users_permissions_user: {
            fields: ['username', 'email']
          },
          savedBy: {
            fields: ['id']
          }
        }
      })

      return this.transformResponse(result)

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error)
      return ctx.throw(500, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    }
  },

  /**
   * –ü–æ–∏—Å–∫ –≥–∞–π–¥–æ–≤ –ø–æ —Ç–µ–≥–∞–º –∏ —Ç–µ–∫—Å—Ç—É
   */
  async search(ctx: any) {
    const { query = '', tags = [], userId } = ctx.request.body
    const { page = 1, pageSize = 20 } = ctx.query

    try {
      let filters = {
        // approved: true, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        publishedAt: { $null: true } // –¢–æ–ª—å–∫–æ –¥—Ä–∞—Ñ—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)
      }

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      if (query === '—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥–∞–π–¥—ã' && userId) {
        filters = {
          users_permissions_user: { documentId: userId },
          publishedAt: { $null: true }
        } as any
      } else if (query === '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ' && userId) {
        filters = {
          savedBy: { documentId: userId },
          publishedAt: { $null: true }
        } as any
      } else {
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º –∏ —Ç–µ–∫—Å—Ç—É
        const searchConditions = []
        console.log('üîç Search query:', query)
        if (query.trim()) {
          // ü§ñ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚Üí –º–∞—Å—Å–∏–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ–≥–æ–≤
          try {
            const { enhancedTags } = await enhanceSearchQuery(query)

            if (enhancedTags.length > 0) {
              console.log(`ü§ñ AI enhanced search "${query}" ‚Üí ${enhancedTags.length} tags:`, enhancedTags)

              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ JSONB –º–∞—Å—Å–∏–≤—É
              const result = await strapi.service('api::guide.guide').searchByTagsSQL(
                enhancedTags,
                parseInt(page as any),
                parseInt(pageSize as any)
              )

              return result

            } else {
              console.log(`‚ö†Ô∏è AI returned no tags, fallback to text search`)
              // Fallback: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ AI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–≥–∏
              searchConditions.push(
                { title: { $containsi: query } },
                { text: { $containsi: query } }
              )
            }
          } catch (aiError) {
            console.error('‚ùå AI search enhancement failed, using fallback:', aiError)
            // Fallback: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI
            searchConditions.push(
              { title: { $containsi: query } },
              { text: { $containsi: query } }
            )
          }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (tags.length > 0) {
          tags.forEach(tag => {
            searchConditions.push({
              tags: { $containsi: tag }
            })
          })
        }

        if (searchConditions.length > 0) {
          filters = {
            $and: [
              { publishedAt: { $null: true } }, // –î—Ä–∞—Ñ—Ç—ã
              { $or: searchConditions }         // –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥ —Å–æ–≤–ø–∞–ª
            ]
          } as any
        }
      }

      console.log(`üîß Final filters:`, JSON.stringify(filters, null, 2))

      const result = await strapi.entityService.findPage('api::guide.guide', {
        filters,
        page,
        pageSize,
        populate: {
          image: {
            fields: ['url', 'alternativeText', 'formats']
          },
          users_permissions_user: {
            fields: ['username', 'email']
          },
          savedBy: {
            fields: ['id']
          }
        },
        sort: { createdAt: 'desc' }
      })

      return result

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤:', error)
      return ctx.throw(500, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤')
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏
   */
  async getPopularTags(ctx: any) {
    try {
      const { limit = 20 } = ctx.query

      const result = await strapi.service('api::guide.guide').getPopularTags(parseInt(limit))

      return ctx.send(result)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤:', error)
      return ctx.throw(500, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤')
    }
  }

}))
