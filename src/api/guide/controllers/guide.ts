/**
 * guide controller
 */

import { factories } from '@strapi/strapi'

export default factories.createCoreController('api::guide.guide', ({ strapi }) => ({

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥–∞–π–¥—ã (—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫—Ä–µ–∞—Ç–∏–≤–æ–≤)
   * –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ creationsCount –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  async find(ctx: any) {
    const { query } = ctx

    // üîß –û–î–ù–û–†–ê–ó–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è creationsCount –¥–ª—è –≤—Å–µ—Ö –≥–∞–π–¥–æ–≤
    // TODO: –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    console.log('üîß –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ creationsCount...')

    let migrationPage = 1
    let hasMore = true
    let totalProcessed = 0

    while (hasMore) {
      const guidesPage = await strapi.documents('api::guide.guide').findMany({
        start: (migrationPage - 1) * 100,
        limit: 100
      })

      if (!guidesPage || guidesPage.length === 0) {
        hasMore = false
        break
      }

      console.log(`  üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${migrationPage} (${guidesPage.length} –≥–∞–π–¥–æ–≤)...`)

      for (const guide of guidesPage) {
        const creations = await strapi.documents('api::creation.creation').findMany({
          filters: { guide: { documentId: { $eq: guide.documentId } } },
          fields: ['id'],
          start: 0,
          limit: 9999
        })

        await strapi.documents('api::guide.guide').update({
          documentId: guide.documentId,
          data: { creationsCount: creations.length }
        })

        totalProcessed++
        console.log(`    ‚úÖ "${guide.title}": creationsCount = ${creations.length}`)
      }

      if (guidesPage.length < 100) {
        hasMore = false
      } else {
        migrationPage++
      }
    }

    console.log(`‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è creationsCount –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥–∞–π–¥–æ–≤: ${totalProcessed}\n`)
    // END MIGRATION creationsCount

    // üîß –û–î–ù–û–†–ê–ó–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ pinterest_id –∏–∑ guide.link –¥–ª—è Creation
    // TODO: –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    console.log('üîß –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ pinterest_id –¥–ª—è Creation...')

    let creationMigrationPage = 1
    let hasMoreCreations = true
    let totalCreationsProcessed = 0

    while (hasMoreCreations) {
      const creationsPage = await strapi.documents('api::creation.creation').findMany({
        filters: {
          $or: [
            { pinterest_id: { $null: true } },
            { pinterest_id: '' }
          ]
        } as any,
        populate: ['guide'],
        start: (creationMigrationPage - 1) * 100,
        limit: 100
      })

      if (!creationsPage || creationsPage.length === 0) {
        hasMoreCreations = false
        break
      }

      console.log(`  üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${creationMigrationPage} (${creationsPage.length} creation)...`)

      for (const creation of creationsPage) {
        if (creation.guide?.link) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º pinterest_id –∏–∑ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ https://www.pinterest.com/pin/646548090292561581/
          const match = creation.guide.link.match(/\/pin\/(\d+)/)
          if (match && match[1]) {
            const pinterestId = match[1]

            await strapi.documents('api::creation.creation').update({
              documentId: creation.documentId,
              data: { pinterest_id: pinterestId }
            })

            totalCreationsProcessed++
            console.log(`    ‚úÖ Creation ${creation.documentId}: pinterest_id = ${pinterestId}`)
          }
        }
      }

      if (creationsPage.length < 100) {
        hasMoreCreations = false
      } else {
        creationMigrationPage++
      }
    }

    console.log(`‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è pinterest_id –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ creation: ${totalCreationsProcessed}\n`)
    // END MIGRATION pinterest_id

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ query
    const page = parseInt(query.pagination?.page) || 1
    const pageSize = parseInt(query.pagination?.pageSize) || 25

    // –ü–æ–ª—É—á–∞–µ–º –≥–∞–π–¥—ã —Å –Ω–∞—Ç–∏–≤–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ creationsCount –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const result = await strapi.entityService.findPage('api::guide.guide', {
      ...query,
      page,
      pageSize,
      filters: {
        ...query.filters,
      } as any,
      sort: {
        creationsCount: 'desc', // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—á–µ—Ç—á–∏–∫—É (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å)
        createdAt: 'desc'       // –ü—Ä–∏ —Ä–∞–≤–Ω–æ–º —Å—á–µ—Ç—á–∏–∫–µ - –ø–æ –¥–∞—Ç–µ
      },
      populate: {
        image: {
          fields: ['url', 'alternativeText', 'formats']
        },
        users_permissions_user: {
          fields: ['username', 'email']
        },
        savedBy: {
          fields: ['id']
        }
      }
    })

    // findPage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { results: [], pagination: {} }
    return {
      data: result.results,
      meta: {
        pagination: result.pagination
      }
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ –ø–æ ID
   */
  async findOne(ctx: any) {
    const { id } = ctx.params
    const { query } = ctx

    const result = await strapi.entityService.findOne('api::guide.guide', id, {
      ...query,
      populate: {
        image: {
          fields: ['url', 'alternativeText', 'formats']
        },
        users_permissions_user: {
          fields: ['username', 'email']
        },
        savedBy: {
          fields: ['id']
        }
      }
    })

    return this.transformResponse(result)
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≥–∞–π–¥
   */
  async create(ctx: any) {
    const user = ctx.state.user

    if (!user) {
      return ctx.unauthorized('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    }

    const { data } = ctx.request.body

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–∞–π–¥—É
    const result = await strapi.entityService.create('api::guide.guide', {
      data: {
        ...data,
        users_permissions_user: user.documentId,
        approved: false, // –ù–æ–≤—ã–µ –≥–∞–π–¥—ã —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      } as any,
      populate: {
        image: {
          fields: ['url', 'alternativeText', 'formats']
        },
        users_permissions_user: {
          fields: ['username', 'email']
        }
      }
    })

    return this.transformResponse(result)
  },

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/—É–±—Ä–∞—Ç—å –≥–∞–π–¥ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
   */
  async toggleSave(ctx: any) {
    const user = ctx.state.user
    const { id } = ctx.params
    const { action } = ctx.request.body // 'save' –∏–ª–∏ 'unsave'

    if (!user) {
      return ctx.unauthorized('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    }

    try {
      const guide = await strapi.entityService.findOne('api::guide.guide', id, {
        populate: ['savedBy']
      }) as any

      if (!guide) {
        return ctx.notFound('–ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const savedByIds = guide.savedBy?.map((u: any) => u.documentId) || []
      const userDocumentId = user.documentId

      let newSavedBy
      if (action === 'save') {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ savedBy, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        if (!savedByIds.includes(userDocumentId)) {
          newSavedBy = [...savedByIds, userDocumentId]
        } else {
          return ctx.badRequest('–ì–∞–π–¥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        }
      } else if (action === 'unsave') {
        // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ savedBy
        newSavedBy = savedByIds.filter(id => id !== userDocumentId)
      } else {
        return ctx.badRequest('–î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å save –∏–ª–∏ unsave')
      }

      const result = await strapi.entityService.update('api::guide.guide', id, {
        data: {
          savedBy: newSavedBy
        } as any,
        populate: {
          image: {
            fields: ['url', 'alternativeText', 'formats']
          },
          users_permissions_user: {
            fields: ['username', 'email']
          },
          savedBy: {
            fields: ['id']
          }
        }
      })

      return this.transformResponse(result)

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error)
      return ctx.throw(500, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    }
  },

  /**
   * –ü–æ–∏—Å–∫ –≥–∞–π–¥–æ–≤ –ø–æ —Ç–µ–≥–∞–º –∏ —Ç–µ–∫—Å—Ç—É
   */
  async search(ctx: any) {
    const { query = '', tags = [], userId } = ctx.request.body
    const { page = 1, pageSize = 20 } = ctx.query

    try {
      let filters = { approved: true }

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      if (query === '—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥–∞–π–¥—ã' && userId) {
        filters = {
          users_permissions_user: { documentId: userId }
        } as any
      } else if (query === '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ' && userId) {
        filters = {
          savedBy: { documentId: userId }
        } as any
      } else {
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º –∏ —Ç–µ–∫—Å—Ç—É
        const searchConditions = []

        if (query.trim()) {
          searchConditions.push(
            { title: { $containsi: query } },
            { text: { $containsi: query } }
          )
        }

        if (tags.length > 0) {
          tags.forEach(tag => {
            searchConditions.push({
              tags: { $contains: tag }
            })
          })
        }

        if (searchConditions.length > 0) {
          filters = { ...filters, $or: searchConditions } as any
        }
      }

      const result = await strapi.entityService.findPage('api::guide.guide', {
        filters,
        page,
        pageSize,
        populate: {
          image: {
            fields: ['url', 'alternativeText', 'formats']
          },
          users_permissions_user: {
            fields: ['username', 'email']
          },
          savedBy: {
            fields: ['id']
          }
        },
        sort: { createdAt: 'desc' }
      })

      return result

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤:', error)
      return ctx.throw(500, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤')
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏
   */
  async getPopularTags(ctx: any) {
    try {
      const { limit = 20 } = ctx.query

      const result = await strapi.service('api::guide.guide').getPopularTags(parseInt(limit))

      return ctx.send(result)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤:', error)
      return ctx.throw(500, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤')
    }
  }

}))
